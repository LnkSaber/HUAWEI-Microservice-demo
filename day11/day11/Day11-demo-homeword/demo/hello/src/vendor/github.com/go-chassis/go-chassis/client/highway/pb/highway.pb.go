// Code generated by protoc-gen-go.
// source: highway.proto
// DO NOT EDIT!

/*
Package highway is a generated protocol buffer package.

It is generated from these files:
	highway.proto

It has these top-level messages:
	RequestHeader
	ResponseHeader
	LoginRequest
	LoginResponse  */
package highway

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package
//MsgType is a variable of type int32
type MsgType int32

// constants for message request, and message login
const (
	MsgTypeRequest MsgType = 0
	MsgTypeLogin   MsgType = 1
)

//MsgTypeName is a variable of type map
var MsgTypeName = map[int32]string{
	0: "REQUEST",
	1: "LOGIN",
}

//MsgTypeValue is a variable of type map
var MsgTypeValue = map[string]int32{
	"REQUEST": 0,
	"LOGIN":   1,
}

func (x MsgType) String() string {
	return proto.EnumName(MsgTypeName, int32(x))
}

//EnumDescriptor is a method
func (MsgType) EnumDescriptor() ([]byte, []int) { return fileDescriptor0, []int{0} }

//RequestHeader is a struct
type RequestHeader struct {
	MsgType          MsgType           `protobuf:"varint,2,opt,name=msgType,enum=highway.MsgType" json:"msgType,omitempty"`
	Flags            int32             `protobuf:"varint,3,opt,name=flags" json:"flags,omitempty"`
	DestMicroservice string            `protobuf:"bytes,1,opt,name=destMicroservice" json:"destMicroservice,omitempty"`
	SchemaID         string            `protobuf:"bytes,5,opt,name=schemaId" json:"schemaId,omitempty"`
	OperationName    string            `protobuf:"bytes,6,opt,name=operationName" json:"operationName,omitempty"`
	Context          map[string]string `protobuf:"bytes,7,rep,name=context" json:"context,omitempty" protobuf_key:"bytes,1,opt,name=key" protobuf_val:"bytes,2,opt,name=value"`
}

//Reset which resets request header
func (m *RequestHeader) Reset()         { *m = RequestHeader{} }
func (m *RequestHeader) String() string { return proto.CompactTextString(m) }

// ProtoMessage protocol message
func (*RequestHeader) ProtoMessage() {}

// Descriptor returns file descriptor
func (*RequestHeader) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{0} }

// GetMsgType is a method which returns message type
func (m *RequestHeader) GetMsgType() MsgType {
	if m != nil {
		return m.MsgType
	}
	return MsgTypeRequest
}

// GetFlags is a method which returns flags
func (m *RequestHeader) GetFlags() int32 {
	if m != nil {
		return m.Flags
	}
	return 0
}

// GetDestMicroservice returns destination microservice
func (m *RequestHeader) GetDestMicroservice() string {
	if m != nil {
		return m.DestMicroservice
	}
	return ""
}

// GetSchemaID is a method which returns schema ID
func (m *RequestHeader) GetSchemaID() string {
	if m != nil {
		return m.SchemaID
	}
	return ""
}

// GetOperationName is a method which returns operation name
func (m *RequestHeader) GetOperationName() string {
	if m != nil {
		return m.OperationName
	}
	return ""
}

// GetContext is a method which returns context
func (m *RequestHeader) GetContext() map[string]string {
	if m != nil {
		return m.Context
	}
	return nil
}

//ResponseHeader is a struct
type ResponseHeader struct {
	Flags      int32             `protobuf:"varint,5,opt,name=flags" json:"flags,omitempty"`
	StatusCode int32             `protobuf:"varint,1,opt,name=statusCode" json:"statusCode,omitempty"`
	Reason     string            `protobuf:"bytes,2,opt,name=reason" json:"reason,omitempty"`
	Context    map[string]string `protobuf:"bytes,3,rep,name=context" json:"context,omitempty" protobuf_key:"bytes,1,opt,name=key" protobuf_val:"bytes,2,opt,name=value"`
}

// Reset is a method which resets response header
func (m *ResponseHeader) Reset()         { *m = ResponseHeader{} }
func (m *ResponseHeader) String() string { return proto.CompactTextString(m) }

// ProtoMessage protocol message
func (*ResponseHeader) ProtoMessage() {}

// Descriptor is a method which returns file descriptor
func (*ResponseHeader) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{1} }

//GetFlags is a method which returns flag
func (m *ResponseHeader) GetFlags() int32 {
	if m != nil {
		return m.Flags
	}
	return 0
}

//GetStatusCode is a method which returns status code
func (m *ResponseHeader) GetStatusCode() int32 {
	if m != nil {
		return m.StatusCode
	}
	return 0
}

//GetReason is a method which returns reason
func (m *ResponseHeader) GetReason() string {
	if m != nil {
		return m.Reason
	}
	return ""
}

// GetContext is a method which returns context
func (m *ResponseHeader) GetContext() map[string]string {
	if m != nil {
		return m.Context
	}
	return nil
}

// LoginRequest is a struct used for handling login request
type LoginRequest struct {
	Protocol            string `protobuf:"bytes,1,opt,name=protocol" json:"protocol,omitempty"`
	ZipName             string `protobuf:"bytes,2,opt,name=zipName" json:"zipName,omitempty"`
	UseProtobufMapCodec bool   `protobuf:"varint,3,opt,name=useProtobufMapCodec" json:"useProtobufMapCodec,omitempty"`
}

// Reset is a method which resets login request
func (m *LoginRequest) Reset()         { *m = LoginRequest{} }
func (m *LoginRequest) String() string { return proto.CompactTextString(m) }

// ProtoMessage protocol message
func (*LoginRequest) ProtoMessage() {}

// Descriptor is a method which returns file descriptor
func (*LoginRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{2} }

// GetProtocol which returns protocol of login request
func (m *LoginRequest) GetProtocol() string {
	if m != nil {
		return m.Protocol
	}
	return ""
}

// GetZipName is a method which returns zipname
func (m *LoginRequest) GetZipName() string {
	if m != nil {
		return m.ZipName
	}
	return ""
}

// GetUseProtobufMapCodec is a method which returns Map codec
func (m *LoginRequest) GetUseProtobufMapCodec() bool {
	if m != nil {
		return m.UseProtobufMapCodec
	}
	return false
}

// LoginResponse is a struct which handles login response
type LoginResponse struct {
	Protocol            string `protobuf:"bytes,1,opt,name=protocol" json:"protocol,omitempty"`
	ZipName             string `protobuf:"bytes,2,opt,name=zipName" json:"zipName,omitempty"`
	UseProtobufMapCodec bool   `protobuf:"varint,3,opt,name=useProtobufMapCodec" json:"useProtobufMapCodec,omitempty"`
}

// Reset is a method which resets login response
func (m *LoginResponse) Reset()         { *m = LoginResponse{} }
func (m *LoginResponse) String() string { return proto.CompactTextString(m) }

// ProtoMessage protocol message
func (*LoginResponse) ProtoMessage() {}

// Descriptor is a method which returns file descriptor
func (*LoginResponse) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{3} }

// GetProtocol is a method which returns protocol
func (m *LoginResponse) GetProtocol() string {
	if m != nil {
		return m.Protocol
	}
	return ""
}

// GetZipName is a method which returns zipname
func (m *LoginResponse) GetZipName() string {
	if m != nil {
		return m.ZipName
	}
	return ""
}

// GetUseProtobufMapCodec is a method which returns Map codec
func (m *LoginResponse) GetUseProtobufMapCodec() bool {
	if m != nil {
		return m.UseProtobufMapCodec
	}
	return false
}

func init() {
	proto.RegisterType((*RequestHeader)(nil), "highway.RequestHeader")
	proto.RegisterType((*ResponseHeader)(nil), "highway.ResponseHeader")
	proto.RegisterType((*LoginRequest)(nil), "highway.LoginRequest")
	proto.RegisterType((*LoginResponse)(nil), "highway.LoginResponse")
	proto.RegisterEnum("highway.MsgType", MsgTypeName, MsgTypeValue)
}

func init() { proto.RegisterFile("highway.proto", fileDescriptor0) }

var fileDescriptor0 = []byte{
	// 401 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x09, 0x6e, 0x88, 0x02, 0xff, 0xbc, 0x52, 0xc1, 0x8e, 0xd3, 0x30,
	0x14, 0x24, 0x8d, 0xd2, 0x6c, 0xdf, 0x6e, 0x56, 0x91, 0x41, 0x28, 0xda, 0x03, 0x0a, 0x65, 0x0f,
	0x51, 0x0f, 0x15, 0x2a, 0x17, 0x54, 0x09, 0x2e, 0x55, 0x05, 0x95, 0xda, 0x02, 0xa6, 0x7c, 0x80,
	0x9b, 0xbc, 0xa6, 0x11, 0x6d, 0x1c, 0x62, 0xa7, 0x25, 0x7c, 0x1a, 0x9f, 0xc2, 0xd7, 0xa0, 0xc4,
	0x4e, 0x48, 0x05, 0x57, 0xf6, 0xe6, 0x19, 0x8f, 0x3d, 0x9e, 0xf1, 0x03, 0x67, 0x9f, 0xc4, 0xfb,
	0x33, 0x2b, 0xc7, 0x59, 0xce, 0x25, 0x27, 0xb6, 0x86, 0xc3, 0x9f, 0x3d, 0x70, 0x28, 0x7e, 0x2b,
	0x50, 0xc8, 0xf7, 0xc8, 0x22, 0xcc, 0xc9, 0x08, 0xec, 0xa3, 0x88, 0x37, 0x65, 0x86, 0x5e, 0xcf,
	0x37, 0x82, 0xdb, 0x89, 0x3b, 0x6e, 0xce, 0xae, 0x14, 0x4f, 0x1b, 0x01, 0x79, 0x02, 0xd6, 0xee,
	0xc0, 0x62, 0xe1, 0x99, 0xbe, 0x11, 0x58, 0x54, 0x01, 0x32, 0x02, 0x37, 0x42, 0x21, 0x57, 0x49,
	0x98, 0x73, 0x81, 0xf9, 0x29, 0x09, 0xd1, 0x33, 0x7c, 0x23, 0x18, 0xd0, 0xbf, 0x78, 0x72, 0x07,
	0x57, 0x22, 0xdc, 0xe3, 0x91, 0x2d, 0x22, 0xcf, 0xaa, 0x35, 0x2d, 0x26, 0xf7, 0xe0, 0xf0, 0x0c,
	0x73, 0x26, 0x13, 0x9e, 0xae, 0xd9, 0x11, 0xbd, 0x7e, 0x2d, 0xb8, 0x24, 0xc9, 0x1b, 0xb0, 0x43,
	0x9e, 0x4a, 0xfc, 0x2e, 0x3d, 0xdb, 0x37, 0x83, 0xeb, 0xc9, 0x8b, 0xf6, 0xbd, 0x17, 0xc1, 0xc6,
	0x33, 0xa5, 0x9a, 0xa7, 0x32, 0x2f, 0x69, 0x73, 0xe6, 0x6e, 0x0a, 0x37, 0xdd, 0x0d, 0xe2, 0x82,
	0xf9, 0x15, 0x4b, 0xfd, 0xde, 0x6a, 0x59, 0x85, 0x3c, 0xb1, 0x43, 0xa1, 0xea, 0x18, 0x50, 0x05,
	0xa6, 0xbd, 0xd7, 0xc6, 0xf0, 0x97, 0x01, 0xb7, 0x14, 0x45, 0xc6, 0x53, 0x81, 0xba, 0xbd, 0xb6,
	0x11, 0xab, 0xdb, 0xc8, 0x33, 0x00, 0x21, 0x99, 0x2c, 0xc4, 0x8c, 0x47, 0xaa, 0x0b, 0x8b, 0x76,
	0x18, 0xf2, 0x14, 0xfa, 0x39, 0x32, 0xc1, 0x53, 0xed, 0xa1, 0x11, 0x79, 0xfb, 0x27, 0x9b, 0x59,
	0x67, 0xbb, 0xef, 0x64, 0xeb, 0xfa, 0xfe, 0x87, 0x70, 0x27, 0xb8, 0x59, 0xf2, 0x38, 0x49, 0x75,
	0x89, 0xd5, 0x4f, 0xd5, 0xb3, 0x13, 0xf2, 0x83, 0xbe, 0xa0, 0xc5, 0xc4, 0x03, 0xfb, 0x47, 0x92,
	0xd5, 0x7f, 0xa4, 0xee, 0x69, 0x20, 0x79, 0x09, 0x8f, 0x0b, 0x81, 0x1f, 0x2b, 0xe1, 0xb6, 0xd8,
	0xad, 0x58, 0x56, 0xe5, 0x0d, 0xeb, 0x79, 0xb9, 0xa2, 0xff, 0xda, 0x1a, 0x9e, 0xc1, 0xd1, 0xbe,
	0x2a, 0xe0, 0x43, 0x19, 0x8f, 0x9e, 0x83, 0xad, 0x07, 0x9c, 0x5c, 0x83, 0x4d, 0xe7, 0x9f, 0xbe,
	0xcc, 0x3f, 0x6f, 0xdc, 0x47, 0x64, 0x00, 0xd6, 0xf2, 0xc3, 0xbb, 0xc5, 0xda, 0x35, 0xb6, 0xfd,
	0xda, 0xf8, 0xd5, 0xef, 0x00, 0x00, 0x00, 0xff, 0xff, 0x73, 0x75, 0x13, 0xd7, 0x4e, 0x03, 0x00,
	0x00,
}
